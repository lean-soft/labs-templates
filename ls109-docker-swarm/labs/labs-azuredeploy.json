{
	"$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"sshPublicKey": {
			"type": "string",
			"metadata": {
				"description": "SSH public key for the Virtual Machines."
			}
		},
		"sshPrivateKey": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "SSH public key for the Virtual Machines."
			}
		},
		"adminPassword": {
			"type": "string",
			"metadata": {
				"description": "Set the adminUser(azureuser) password."
			}
		},
		"studentName": {
			"type": "string",
			"defaultValue": "student",
			"metadata": {
				"description": "Student name, using to generate vm name and so on."
			}
		},
		"scriptUrl": {
			"type": "string",
			"defaultValue": "https://raw.githubusercontent.com/WilsonBoGH/azure-template/master/InstallDockerAndPrivateRegistry.sh",
			"metadata": {
				"description": "The url of the script that install docker and swarm."
			}
		},
		"scriptUrl2 ": {
			"type": "string",
			"defaultValue": "https://raw.githubusercontent.com/WilsonBoGH/azure-template/master/InstallDocker.sh",
			"metadata": {
				"description": "The url of the script that install docker and docker-compose."
			}
		},
		"masterCount": {
			"type": "int",
			"defaultValue": 1,
			"allowedValues": [
				1,
				3,
				5
			]
		},
		"nodeCount": {
			"type": "int",
			"defaultValue": 2,
			"metadata": {
				"description": "Number of Swarm worker nodes in the cluster."
			}
		}
	},
	"variables": {
		"adminUsername": "azureuser",
		"vmNameMaster": "swarm-master-",
		"masterFirstAddr": "4",
		"baseSubnet": "10.0.0.",
		"vmNameNode": "swarm-node-",
		"vmSizeMaster": "Standard_A1_v2",
		"vmSizeNode": "Standard_A1_v2",
		"apiVersion": "2015-06-15",
		"availabilitySetMasters": "swarm-masters-set",
		"availabilitySetNodes": "swarm-nodes-set",
		"osImagePublisher": "Canonical",
		"osImageOffer": "UbuntuServer",
		"osImageSKU": "14.04.3-LTS",
		"managementPublicIPAddrName": "swarm-lb-masters-ip",
		"nodesPublicIPAddrName": "swarm-lb-nodes-ip",
		"virtualNetworkName": "swarm-vnet",
		"subnetNameMasters": "subnet-masters",
		"subnetNameNodes": "subnet-nodes",
		"addressPrefixMasters": "10.0.0.0/16",
		"addressPrefixNodes": "192.168.0.0/16",
		"subnetPrefixMasters": "10.0.0.0/24",
		"subnetPrefixNodes": "192.168.0.0/24",
		"subnetRefMaster": "[concat(resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName')),'/subnets/',variables('subnetNameMasters'))]",
		"subnetRefNodes": "[concat(resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName')),'/subnets/',variables('subnetNameNodes'))]",
		"mastersNsgName": "swarm-masters-firewall",
		"nodesNsgName": "swarm-nodes-firewall",
		"mastersNsgID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('mastersNsgName'))]",
		"nodesNsgID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('nodesNsgName'))]",
		"clusterFqdn": "[concat('swarm-',uniqueString(resourceGroup().id, deployment().name))]",
		"storageAccountType": "Standard_LRS",
		"NewStorageAccountName": "[concat('saswarm', uniquestring(resourceGroup().id) )]",
		"vhdBlobContainer": "vhds",
		"mastersLbName": "swarm-lb-masters",
		"mastersLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('mastersLbName'))]",
		"mastersLbIPConfigName": "MastersLBFrontEnd",
		"mastersLbIPConfigID": "[concat(variables('mastersLbID'),'/frontendIPConfigurations/', variables('mastersLbIPConfigName'))]",
		"mastersLbBackendPoolName": "swarm-masters-pool",
		"nodesLbName": "swarm-lb-nodes",
		"nodesLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('nodesLbName'))]",
		"nodesLbBackendPoolName": "swarm-nodes-pool",
		"clusterInstallParameters": "[concat(parameters('masterCount'), ' ',variables('vmNameMaster'), ' ',variables('masterFirstAddr'), ' ',variables('adminUsername'), ' ', variables('baseSubnet'), ' ', parameters('sshPrivateKey'), ' ', parameters('sshPublicKey'))]",
		"sshKeyPath": "[concat('/home/', variables('adminUsername'), '/.ssh/authorized_keys')]",


		"vmNameOperation": "operation",
		"vmNameTest": "test",
		"vmSizeOper": "Standard_D2_v2",
		"vmSizeTest": "Standard_A1_v2",

		"storageAccountName": "[concat('lstrain', uniquestring(resourceGroup().id))]",
		"vNetNameDev": "[concat('ls-t-', parameters('studentName'), '-vnet-dev')]",
		"vNetNameSwarm": "[concat('ls-t-', parameters('studentName'), '-vnet-swarm')]",
		"operIpName": "operation-ip",
		"testIpName": "test-ip",

		"operDomainNameLabel": "[concat('oper-pubip-', uniqueString(resourceGroup().id, deployment().name))]",
		"testDomainNameLabel": "[concat('test-pubip-', uniqueString(resourceGroup().id, deployment().name))]",
		"testNsgId": "[concat('ls-t-', parameters('studentName'), '-test-nsg')]",
		"operNsgId": "[concat('ls-t-', parameters('studentName'), '-oper-nsg')]",

		"operNetworkInterfaceName": "[concat('ls-t-', parameters('studentName'), '-oper-nw')]",
		"testNetworkInterfaceName": "[concat('ls-t-', parameters('studentName'), '-test-nw')]"
	},
	"resources": [{
			"type": "Microsoft.Storage/storageAccounts",
			"name": "[variables('newStorageAccountName')]",
			"apiVersion": "2015-06-15",
			"location": "[resourceGroup().location]",
			"properties": {
				"accountType": "[variables('storageAccountType')]"
			}
		},
		{
			"type": "Microsoft.Compute/availabilitySets",
			"name": "[variables('availabilitySetMasters')]",
			"apiVersion": "2015-06-15",
			"location": "[resourceGroup().location]",
			"properties": {}
		},
		{
			"type": "Microsoft.Compute/availabilitySets",
			"name": "[variables('availabilitySetNodes')]",
			"apiVersion": "2015-06-15",
			"location": "[resourceGroup().location]",
			"properties": {}
		},
		{
			"apiVersion": "2015-06-15",
			"type": "Microsoft.Network/publicIPAddresses",
			"name": "[variables('managementPublicIPAddrName')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"publicIPAllocationMethod": "Static",
				"dnsSettings": {
					"domainNameLabel": "[concat(variables('clusterFqdn'), '-manage')]"
				}
			}
		},
		{
			"apiVersion": "2015-06-15",
			"type": "Microsoft.Network/publicIPAddresses",
			"name": "[variables('nodesPublicIPAddrName')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"publicIPAllocationMethod": "Dynamic",
				"dnsSettings": {
					"domainNameLabel": "[variables('clusterFqdn')]"
				}
			}
		},
		{
			"apiVersion": "2015-06-15",
			"type": "Microsoft.Network/virtualNetworks",
			"name": "[variables('virtualNetworkName')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [],
			"properties": {
				"addressSpace": {
					"addressPrefixes": [
						"[variables('addressPrefixMasters')]",
						"[variables('addressPrefixNodes')]"
					]
				},
				"subnets": [{
						"name": "[variables('subnetNameMasters')]",
						"properties": {
							"addressPrefix": "[variables('subnetPrefixMasters')]"
						}
					},
					{
						"name": "[variables('subnetNameNodes')]",
						"properties": {
							"addressPrefix": "[variables('subnetPrefixNodes')]"
						}
					}
				]
			}
		},
		{
			"apiVersion": "2015-06-15",
			"type": "Microsoft.Network/networkSecurityGroups",
			"name": "[variables('mastersNsgName')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"securityRules": [{
						"name": "ssh",
						"properties": {
							"description": "",
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "22",
							"sourceAddressPrefix": "*",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 1000,
							"direction": "Inbound"
						}
					},
					{
						"name": "vote",
						"properties": {
							"description": "",
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "5000",
							"sourceAddressPrefix": "*",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 1010,
							"direction": "Inbound"
						}
					},
					{
						"name": "result",
						"properties": {
							"description": "",
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "5001",
							"sourceAddressPrefix": "*",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 1020,
							"direction": "Inbound"
						}
					},
					{
						"name": "vir",
						"properties": {
							"description": "",
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "8080",
							"sourceAddressPrefix": "*",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 1030,
							"direction": "Inbound"
						}
					}
				]
			}
		},
		{
			"apiVersion": "2015-06-15",
			"type": "Microsoft.Network/networkSecurityGroups",
			"name": "[variables('nodesNsgName')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"securityRules": [{
					"name": "AllowAny",
					"properties": {
						"description": "Swarm node ports need to be configured on the load balancer to be reachable",
						"protocol": "*",
						"sourcePortRange": "*",
						"destinationPortRange": "*",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 1000,
						"direction": "Inbound"
					}
				}]
			}
		},
		{
			"apiVersion": "2015-06-15",
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('vmNameMaster'), copyIndex(), '-nic')]",
			"location": "[resourceGroup().location]",
			"copy": {
				"name": "nicLoopMaster",
				"count": "[parameters('masterCount')]"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/loadBalancers/', variables('mastersLbName'))]",
				"[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
				"[concat('Microsoft.Network/loadBalancers/', variables('mastersLbName'), '/inboundNatRules/',  'SSH-', variables('vmNameMaster'), copyIndex())]",
				"[concat('Microsoft.Network/loadBalancers/', variables('mastersLbName'), '/inboundNatRules/',  'vote-', variables('vmNameMaster'), copyIndex())]",
				"[concat('Microsoft.Network/loadBalancers/', variables('mastersLbName'), '/inboundNatRules/',  'result-', variables('vmNameMaster'), copyIndex())]",
				"[concat('Microsoft.Network/loadBalancers/', variables('mastersLbName'), '/inboundNatRules/',  'vir-', variables('vmNameMaster'), copyIndex())]"
			],
			"properties": {
				"ipConfigurations": [{
					"name": "ipConfigMaster",
					"properties": {
						"privateIPAllocationMethod": "Static",
						"privateIPAddress": "[concat('10.0.0.', copyIndex(4))]",
						"subnet": {
							"id": "[variables('subnetRefMaster')]"
						},
						"loadBalancerBackendAddressPools": [{
							"id": "[concat(variables('mastersLbID'), '/backendAddressPools/', variables('mastersLbBackendPoolName'))]"
						}],
						"loadBalancerInboundNatRules": [{
								"id": "[concat(variables('mastersLbID'),'/inboundNatRules/SSH-',variables('vmNameMaster'),copyindex())]"
							},
							{
								"id": "[concat(variables('mastersLbID'),'/inboundNatRules/vote-',variables('vmNameMaster'),copyindex())]"
							},
							{
								"id": "[concat(variables('mastersLbID'),'/inboundNatRules/result-',variables('vmNameMaster'),copyindex())]"
							},
							{
								"id": "[concat(variables('mastersLbID'),'/inboundNatRules/vir-',variables('vmNameMaster'),copyindex())]"
							}
						]
					}
				}]
			}
		},
		{
			"apiVersion": "2015-06-15",
			"name": "[variables('mastersLbName')]",
			"type": "Microsoft.Network/loadBalancers",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[concat('Microsoft.Network/publicIPAddresses/', variables('managementPublicIPAddrName'))]"
			],
			"properties": {
				"frontendIPConfigurations": [{
					"name": "[variables('mastersLbIPConfigName')]",
					"properties": {
						"publicIPAddress": {
							"id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('managementPublicIPAddrName'))]"
						}
					}
				}],
				"backendAddressPools": [{
					"name": "[variables('mastersLbBackendPoolName')]"
				}]
			}
		},
		{
			"apiVersion": "2015-06-15",
			"type": "Microsoft.Network/loadBalancers/inboundNatRules",
			"name": "[concat(variables('mastersLbName'), '/', 'SSH-', variables('vmNameMaster'), copyIndex())]",
			"location": "[resourceGroup().location]",
			"copy": {
				"name": "lbNatLoopMaster",
				"count": "[parameters('masterCount')]"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/loadBalancers/', variables('mastersLbName'))]"
			],
			"properties": {
				"frontendIPConfiguration": {
					"id": "[variables('mastersLbIPConfigID')]"
				},
				"protocol": "tcp",
				"frontendPort": "[copyIndex(2200)]",
				"backendPort": 22,
				"enableFloatingIP": false
			}
		},
		{
			"apiVersion": "2015-06-15",
			"type": "Microsoft.Network/loadBalancers/inboundNatRules",
			"name": "[concat(variables('mastersLbName'), '/', 'vote-', variables('vmNameMaster'), copyIndex())]",
			"location": "[resourceGroup().location]",
			"copy": {
				"name": "lbNatLoopMaster",
				"count": "[parameters('masterCount')]"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/loadBalancers/', variables('mastersLbName'))]"
			],
			"properties": {
				"frontendIPConfiguration": {
					"id": "[variables('mastersLbIPConfigID')]"
				},
				"protocol": "tcp",
				"frontendPort": 5000,
				"backendPort": 5000,
				"enableFloatingIP": false
			}
		},
		{
			"apiVersion": "2015-06-15",
			"type": "Microsoft.Network/loadBalancers/inboundNatRules",
			"name": "[concat(variables('mastersLbName'), '/', 'result-', variables('vmNameMaster'), copyIndex())]",
			"location": "[resourceGroup().location]",
			"copy": {
				"name": "lbNatLoopMaster",
				"count": "[parameters('masterCount')]"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/loadBalancers/', variables('mastersLbName'))]"
			],
			"properties": {
				"frontendIPConfiguration": {
					"id": "[variables('mastersLbIPConfigID')]"
				},
				"protocol": "tcp",
				"frontendPort": 5001,
				"backendPort": 5001,
				"enableFloatingIP": false
			}
		},
		{
			"apiVersion": "2015-06-15",
			"type": "Microsoft.Network/loadBalancers/inboundNatRules",
			"name": "[concat(variables('mastersLbName'), '/', 'vir-', variables('vmNameMaster'), copyIndex())]",
			"location": "[resourceGroup().location]",
			"copy": {
				"name": "lbNatLoopMaster",
				"count": "[parameters('masterCount')]"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/loadBalancers/', variables('mastersLbName'))]"
			],
			"properties": {
				"frontendIPConfiguration": {
					"id": "[variables('mastersLbIPConfigID')]"
				},
				"protocol": "tcp",
				"frontendPort": 8080,
				"backendPort": 8080,
				"enableFloatingIP": false
			}
		},
		{
			"apiVersion": "2015-06-15",
			"name": "[variables('nodesLbName')]",
			"type": "Microsoft.Network/loadBalancers",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[concat('Microsoft.Network/publicIPAddresses/', variables('nodesPublicIPAddrName'))]"
			],
			"properties": {
				"frontendIPConfigurations": [{
					"name": "LoadBalancerFrontEnd",
					"properties": {
						"publicIPAddress": {
							"id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('nodesPublicIPAddrName'))]"
						}
					}
				}],
				"backendAddressPools": [{
					"name": "[variables('nodesLbBackendPoolName')]"
				}]
			}
		},
		{
			"apiVersion": "2015-06-15",
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('vmNameNode'),copyIndex(), '-nic')]",
			"location": "[resourceGroup().location]",
			"copy": {
				"name": "nicLoopNode",
				"count": "[parameters('nodeCount')]"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/loadBalancers/', variables('nodesLbName'))]",
				"[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
			],
			"properties": {
				"ipConfigurations": [{
					"name": "ipConfigNode",
					"properties": {
						"privateIPAllocationMethod": "Dynamic",
						"subnet": {
							"id": "[variables('subnetRefNodes')]"
						},
						"loadBalancerBackendAddressPools": [{
							"id": "[concat(variables('nodesLbID'), '/backendAddressPools/', variables('nodesLbBackendPoolName'))]"
						}]
					}
				}]
			}
		},
		{
			"apiVersion": "2015-06-15",
			"type": "Microsoft.Compute/virtualMachines",
			"name": "[concat(variables('vmNameMaster'), copyIndex())]",
			"location": "[resourceGroup().location]",
			"copy": {
				"name": "vmLoopMaster",
				"count": "[parameters('masterCount')]"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/networkInterfaces/', variables('vmNameMaster'), copyIndex(), '-nic')]",
				"[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetMasters'))]"
			],
			"properties": {
				"availabilitySet": {
					"id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetMasters'))]"
				},
				"hardwareProfile": {
					"vmSize": "[variables('vmSizeMaster')]"
				},
				"osProfile": {
					"computerName": "[concat(variables('vmNameMaster'), copyIndex())]",
					"adminUsername": "[variables('adminUsername')]",
					"adminPassword": "[parameters('adminPassword')]",
					"linuxConfiguration": {
						"disablePasswordAuthentication": false,
						"ssh": {
							"publicKeys": [{
								"path": "[variables('sshKeyPath')]",
								"keyData": "[parameters('sshPublicKey')]"
							}]
						}
					}
				},
				"storageProfile": {
					"imageReference": {
						"publisher": "[variables('osImagePublisher')]",
						"offer": "[variables('osImageOffer')]",
						"sku": "[variables('osImageSKU')]",
						"version": "latest"
					},
					"osDisk": {
						"name": "[concat(variables('vmNameMaster'), copyIndex(),'-osdisk')]",
						"vhd": {
							"uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('NewStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob, variables('vhdBlobContainer'), '/master-', copyIndex(), '-osdisk.vhd')]"
						},
						"caching": "ReadWrite",
						"createOption": "FromImage"
					}
				},
				"networkProfile": {
					"networkInterfaces": [{
						"id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('vmNameMaster'), copyIndex(), '-nic'))]"
					}]
				}
			}
		},
		{
			"apiVersion": "2015-06-15",
			"type": "Microsoft.Compute/virtualMachines",
			"name": "[concat(variables('vmNameNode'), copyIndex())]",
			"location": "[resourceGroup().location]",
			"copy": {
				"name": "vmLoopNode",
				"count": "[parameters('nodeCount')]"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/networkInterfaces/', variables('vmNameNode'), copyIndex(), '-nic')]"
			],
			"properties": {
				"availabilitySet": {
					"id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetNodes'))]"
				},
				"hardwareProfile": {
					"vmSize": "[variables('vmSizeNode')]"
				},
				"osProfile": {
					"computerName": "[concat(variables('vmNameNode'), copyIndex())]",
					"adminUsername": "[variables('adminUsername')]",
					"adminPassword": "[parameters('adminPassword')]",
					"linuxConfiguration": {
						"disablePasswordAuthentication": false,
						"ssh": {
							"publicKeys": [{
								"path": "[variables('sshKeyPath')]",
								"keyData": "[parameters('sshPublicKey')]"
							}]
						}
					}
				},
				"storageProfile": {
					"imageReference": {
						"publisher": "[variables('osImagePublisher')]",
						"offer": "[variables('osImageOffer')]",
						"sku": "[variables('osImageSKU')]",
						"version": "latest"
					},
					"osDisk": {
						"name": "[concat(variables('vmNameMaster'), copyIndex(),'-osdisk')]",
						"vhd": {
							"uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('NewStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob, variables('vhdBlobContainer'), '/node-', copyIndex(), '-osdisk.vhd')]"
						},
						"caching": "ReadWrite",
						"createOption": "FromImage"
					}
				},
				"networkProfile": {
					"networkInterfaces": [{
						"id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('vmNameNode'), copyindex(), '-nic'))]"
					}]
				}
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('vmNameMaster'), copyIndex(), '/InstallDockerAndPrivateRegistry')]",
			"apiVersion": "[variables('apiVersion')]",
			"location": "[resourceGroup().location]",
			"copy": {
				"name": "extensionLoopMaster",
				"count": "[parameters('masterCount')]"
			},
			"dependsOn": [
				"[concat('Microsoft.Compute/virtualMachines/', variables('vmNameMaster'), copyIndex())]"
			],
			"properties": {
				"publisher": "Microsoft.OSTCExtensions",
				"type": "CustomScriptForLinux",
				"typeHandlerVersion": "1.5",
				"settings": {
					"fileUris": [
						"[parameters('scriptUrl')]"
					],
					"commandToExecute": "[concat('/bin/bash -c \"/bin/bash InstallDockerAndPrivateRegistry.sh ', variables('clusterInstallParameters'), ' >> /var/log/azure/cluster-bootstrap.log 2>&1\"')]"
				}
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('vmNameNode'), copyIndex(), '/InstallDockerAndPrivateRegistry')]",
			"apiVersion": "[variables('apiVersion')]",
			"location": "[resourceGroup().location]",
			"copy": {
				"name": "extensionLoopNode",
				"count": "[parameters('nodeCount')]"
			},
			"dependsOn": [
				"[concat('Microsoft.Compute/virtualMachines/', variables('vmNameNode'), copyIndex())]"
			],
			"properties": {
				"publisher": "Microsoft.OSTCExtensions",
				"type": "CustomScriptForLinux",
				"typeHandlerVersion": "1.5",
				"settings": {
					"fileUris": [
						"[parameters('scriptUrl')]"
					],
					"commandToExecute": "[concat('/usr/bin/nohup /bin/bash -c \"/bin/bash InstallDockerAndPrivateRegistry.sh ', variables('clusterInstallParameters'), ' >> /var/log/azure/cluster-bootstrap.log 2>&1 &\" &')]"
				}
			}
		},











		{
			"type": "Microsoft.Network/virtualNetworks",
			"name": "[variables('vNetNameDev')]",
			"apiVersion": "2016-03-30",
			"location": "[resourceGroup().location]",
			"properties": {
				"addressSpace": {
					"addressPrefixes": [
						"10.1.1.0/24"
					]
				},
				"subnets": [{
					"name": "default",
					"properties": {
						"addressPrefix": "10.1.1.0/24"
					}
				}]
			},
			"dependsOn": []
		},

		{
			"type": "Microsoft.Storage/storageAccounts",
			"sku": {
				"name": "Standard_LRS",
				"tier": "Standard"
			},
			"kind": "Storage",
			"name": "[variables('storageAccountName')]",
			"apiVersion": "2016-01-01",
			"location": "[resourceGroup().location]",
			"tags": {},
			"properties": {},
			"dependsOn": []
		}
	],
	"outputs": {
		"subscriptionId": {
			"type": "string",
			"value": "[subscription().subscriptionId]"
		},
		"resourceGroupName": {
			"type": "string",
			"value": "[resourceGroup().name]"
		},
		"resourceGroupLocation": {
			"type": "string",
			"value": "[resourceGroup().location]"
		},
		"adminUsername": {
			"type": "string",
			"value": "[variables('adminUsername')]"
		},
		"adminPassword": {
			"type": "string",
			"value": "[parameters('adminPassword')]"
		},
		"hostname": {
			"type": "string",
			"value": "[reference(variables('managementPublicIPAddrName')).dnsSettings.fqdn]"
		},
		"sshTunnelCmd": {
			"type": "string",
			"value": "[concat('ssh -L 2375:swarm-master-0:2375 -N ', variables('adminUsername'), '@', reference(variables('managementPublicIPAddrName')).dnsSettings.fqdn, ' -p 2200')]"
		},
		"dockerCmd": {
			"type": "string",
			"value": "docker -H tcp://localhost:2375 info"
		},
		"swarmNodesLoadBalancerAddress": {
			"type": "string",
			"value": "[reference(variables('nodesPublicIPAddrName')).dnsSettings.fqdn]"
		},
		"sshMaster0": {
			"type": "string",
			"value": "[concat('ssh ', variables('adminUsername'), '@', reference(variables('managementPublicIPAddrName')).dnsSettings.fqdn, ' -A -p 2200')]"
		},
		"sshMaster1": {
			"type": "string",
			"value": "[concat('ssh ', variables('adminUsername'), '@', reference(variables('managementPublicIPAddrName')).dnsSettings.fqdn, ' -A -p 2201')]"
		},
		"sshMaster2": {
			"type": "string",
			"value": "[concat('ssh ', variables('adminUsername'), '@', reference(variables('managementPublicIPAddrName')).dnsSettings.fqdn, ' -A -p 2202')]"
		}
	}
}